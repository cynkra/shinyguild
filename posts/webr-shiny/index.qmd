---
title: "webR and Shiny"
author: "David Granjon"
date: "2023-09-27"
categories: [news]
---

![](webr-shiny.png){width="25%" fig.align="center"}

```{r, include = FALSE}
knitr::opts_chunk$set(
  collapse = TRUE,
  comment = "#>",
  fig.path = "man/figures/README-",
  out.width = "100%"
)
library(shiny)
library(bslib)

create_app_link <- function(mode = c("app", "editor"), header = TRUE) {
  mode <- match.arg(mode)
  
  app_code <- "NobwRAdghgtgpmAXGKAHVA6ASmANGAYwHsIAXOMpMAGwEsAjAJykYE8AKAZwAtaJWAlAB0IdJiw71OAFgAiUHsIgiArrQAEAHgC06gCYLu9Iiz0AFKAHM47EevWlapanHUBedULAAhIgA91AEEzAEkvXDt9Q2NTAAk4KD04RnYBCIh7Ax4Yxj0AZVok+hZU9Mzok1zfPQ5I+1IrTgASTlJWF1swYxr1EHViggBrS0YiFQg9bWJqIkZEdUtuIlaAd15yAF8vNLr1ADNqNT0sIhXbDPtLqAJHEm8VUlISTqfLSxcAfWM-cM8wABUiG8XOpfD8wDsLpd1NdbhB7o9nl5GHAYEQAG5wL7+X5eLCojGuMG-AjUBScdx-eiWbQGCDWRjbMrQmE3Wh3B5PCCdFGtWZY764sD4vko0E4vDqUnkyleanaTgqAgEOCcThM3b2WHs+GcpFgFSoAzkbHg3B-ACqRqg5HFZqlZLVsq6NNQjFoMAk212kOhTFKu2+5xZ6hWhVI3EpAEYAEzM6GOZyuDzkPykADyD1QD063w+rRtcA1UMuXjB-SINXCmvUhWdMFYgrwNemZNQnAYII8-ywFoAovHLqTllB6F31D3+4P7KgZhmszmvLOiKRvSWlPYlEoRJxkpjGFpdHtxmznnxs6RzWNSBfzbu1TqBL1IteL01l6RD+oURNkmY5+wIC7CiACO7AAITng8TQNt8TStmgu56BulwfuwjAQLMMDsDGAAMuECChGwoS+C6kE0eYFraOjfhQSSMP8cBpoBuxUa4NG0Hs6jsFB5Gwf48FENQbZIU+XgIe2cB6F46hwNQu5-CeQkiVJXi7KgCjkJ0ACyrAVgEtDqpKbFESRFxEFIe5wH2mJkDxEBvq87wCv45pASWhrGnAYKdPx9raiQzpOS4a72MRkQvpZjCYjZFCkPZb4omimKmm5uyeYWPleH5vwBRkHjIgSmKheo4UXJFu7RdZtnxbxTS8k8KKpc+HnWuQWVgDlkp5c6DX8iVZX2BVVmxXZdUZSa3xpa1XlZSWQ2dY2ErmjWPUFQabVFpKNZEKgcIUh4dCtMGIYOE447cDGnQAHJwCsZ1Jr8WRGJUejeIk1jsFG5rTLMzpuh6XoQr6p1USoB1-HSDK4vNlycEJhTxIkySUpOA41vYYZ6BGlLSDWKGbpEg2eOZUUxTVCXQX5TTooZnZwNN0ISUhX6cdxdXU8zUliYQymIapYCyfJrheEpwn89JYC7LTHZjuxuhs5TfFLX4NN03LPMy-TMlyQpXi8HoSTKFLJbwGqVjy+oGmtDYXi6fptZGT9fOSXoK0oBMvxaxrrFLCs10rpxtAEDaOrsGbnAW+abSoMmfwrCwEB8JYT0qMwcLRqZIhbMoEA8HwrCBOg7BqHeVmMEoYAbLg4DQPAVCyH2eQAMJYCEZj-CE6bXXgvNkHFVD-OdcDzPEwlEOoeS8Pw4EiIEDxLHM6jyLTejqAA4swEAAFYkBgc8L7MFqMNQ8zcI8qCIAA9Ff7r94wezXHAGDEDAIgADLBxQu7zNpIT-CIWQhlZxQFYNpSsI9J5+xDruEQ-xGjzGsI8ZOCoGiMHINJCA-xWCx3mFPAuIgq410gLABAyB8SJHgBgGAehe7EH7pQZA-xeAUkMjCDIY8ZjqAAOqzGoGvfB-AYToH3hAKuABdIAA"
  
  app_url <- sprintf(
    "https://shinylive.rinterface.com/%s/#code=%s", mode, app_code
  )
  
  if (!header) {
    app_url <- paste0(app_url, "&h=0")
  }
  
  tags$iframe(
    # To allow the content to fill the full screen card
    class = "html-fill-item",
    src = app_url, 
    height = "700", 
    width = "100%",
    style = "border: 1px solid rgba(0,0,0,0.175); border-radius: .375rem;",
    allowfullscreen = "",
    allow = "autoplay",
    `data-external` = "1"
  )
}
```

## Introduction

[`webR`](https://github.com/r-wasm/webr/) allows to run R in the browser without any installation. That was one of the main motivation for its creator, George Stagg. The goal of this article is not to describe how webR was developed but what you can do with it.

Under the hood, webR is a JavaScript package which can be downloaded from `npm` (see it as a sort of CRAN for JS packages but fairly less strict regarding the content formatting). As you may imagine, one can't use the existing CRAN repositories as they are not made for web assembly (wasm), which powers webR. Therefore, the webR team made it possible to compile your own packages, owing to a rather complex toolchain involving [Emscripten](https://emscripten.org/). The currently provided repository is deployed at https://repo.r-wasm.org/.

[shinylive](https://github.com/posit-dev/shinylive) is a JavaScript app (React) leveraging webR as well as Pyodide (See more [here](https://shiny.posit.co/py/docs/shinylive.html#:~:text=Shinylive%20allows%20you%20to%20run,connect%20via%20the%20web%20browser.)), a Python web browser version. In this article, we'll only focus on the R side but keep in mind that the shinylive repository supports both. This repository allows to export a working shinylive app.

The resulting app may have different layouts:

- App only.
- App + header for sharing code.
- App + editor + terminal.
- App + examples... That's the one you can access [here](https://shinylive.io/r/examples/).

A tiny R package called [`{shinylive}`](https://github.com/posit-dev/r-shinylive) creates plug and play shiny apps for the browser by downloading all the necessary files from the [shinylive](https://github.com/posit-dev/shinylive) repository. Be careful not to be confused!

A cool feature about the shinylive app is code sharing. The app code is compressed to base64 and shared via the url. Therefore, you can build your app in the editor and share it to others.

## Customizing it

What if you want to install packages not available on https://repo.r-wasm.org/? You'd have to compile your own packages as described earlier:

- Build webR and all the system libraries.
- Build this [repository](https://github.com/r-wasm/webr-repo) and add your packages to the existing `https://github.com/r-wasm/webr-repo/blob/main/repo-packages` list. Note that in the `Makefile` you'll have to give the link to the webR installation by passing `WEBR_ROOT=<WEBR_PATH>`.

That's really not straightforward.

I was able to compile a customized [repository](https://github.com/RinteRface/rinterface-webr-repo) which powers my own shinylive [app](https://github.com/RinteRface/rinterface-shinylive). I had to slightly change the code to remove the Python support, as it was not necessary.

## Usage examples

- `{pkgdown}` + shinylive: https://github.com/DivadNojnarg/shinylivePkgDown.
- shinylive + quarto: have a shiny app without having to go back and forth between windows.

### Embedded app

Below is an embedded R shinylive app running in a separate server. The iframe is included in a `{bslib}` card. 

```{r, eval=TRUE, echo=FALSE}
card(create_app_link("app", FALSE), full_screen = TRUE)
```

### Embedded app + editor

An embedded shinylive app editor. User can share the code. Note: the plot won't likely show on smaller screen leading to an error in the R console.

```{r, eval=TRUE, echo=FALSE}
card(create_app_link("editor"), full_screen = TRUE)
```

## Limitations

Currently, there are few limitations:

- Have to install all packages on app load, which takes some time for R. It will be fixed soon.
- Necessary to have your own CRAN-like for wasm at some point. The webR team won't be able to compile any single package on request.
- Few R functions don't work well.
- Data are available in the browser. Not suitable for clinical apps in the pharma world, except if data are publicly made available on purpose (synthetic data ...).

I personally think webR will be great for teaching and presentations. However, I don't see it replacing the current infrastructures for more complex apps.
